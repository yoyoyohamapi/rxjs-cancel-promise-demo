{"dependencies":[{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/package.json","includedInParent":true,"mtime":1519633766323},{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/node_modules/rxjs/package.json","includedInParent":true,"mtime":1513892921000},{"name":"./scan","loc":{"line":2,"column":21}},{"name":"./takeLast","loc":{"line":3,"column":25}},{"name":"./defaultIfEmpty","loc":{"line":4,"column":31}},{"name":"../util/pipe","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","map":{"mappings":[{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rxjs/operators/reduce.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}}],"sources":{"node_modules/rxjs/operators/reduce.js":"\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map"},"lineCount":69}},"hash":"eef0969e3154cc04b801dbd88fabe148","cacheData":{"env":{}}}