{"dependencies":[{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/package.json","includedInParent":true,"mtime":1519633766323},{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/node_modules/rxjs/package.json","includedInParent":true,"mtime":1513892921000},{"name":"../OuterSubscriber","loc":{"line":7,"column":32}},{"name":"../util/subscribeToResult","loc":{"line":8,"column":34}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","map":{"mappings":[{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rxjs/operators/withLatestFrom.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}}],"sources":{"node_modules/rxjs/operators/withLatestFrom.js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map"},"lineCount":132}},"hash":"7548ab83b7ec2f7d1a022a45ec90c11a","cacheData":{"env":{}}}