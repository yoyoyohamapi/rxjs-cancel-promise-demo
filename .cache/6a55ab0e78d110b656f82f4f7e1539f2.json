{"dependencies":[{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/package.json","includedInParent":true,"mtime":1519633766323},{"name":"/Users/woo/Projects/2018/rxjs-cancel-promise-demo/node_modules/rxjs/package.json","includedInParent":true,"mtime":1513892921000},{"name":"../Observable","loc":{"line":7,"column":27}},{"name":"./ScalarObservable","loc":{"line":8,"column":33}},{"name":"./EmptyObservable","loc":{"line":9,"column":32}},{"name":"../util/isScheduler","loc":{"line":10,"column":28}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","map":{"mappings":[{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rxjs/observable/ArrayObservable.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}}],"sources":{"node_modules/rxjs/observable/ArrayObservable.js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map"},"lineCount":122}},"hash":"b988fc3acb741068149dcd7d0644a164","cacheData":{"env":{}}}